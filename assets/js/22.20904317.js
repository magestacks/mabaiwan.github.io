(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{808:function(t,a,s){"use strict";s.r(a);var e=s(118),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mybatis-核心架构设计分享"}},[t._v("Mybatis 核心架构设计分享 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-核心架构设计分享"}},[t._v("#")])]),t._v(" "),s("blockquote",[s("p",[t._v("本次分享内容依据 Mybatis-3-3.4.x 源码")])]),t._v(" "),s("h2",{attrs:{id:"带着问题思考本次分享"}},[t._v("带着问题思考本次分享 "),s("a",{staticClass:"header-anchor",attrs:{href:"#带着问题思考本次分享"}},[t._v("#")])]),t._v(" "),s("ol",[s("li",[t._v("Mybatis 与 JDBC 的关系")]),t._v(" "),s("li",[t._v(".xml 文件定义 SQL 语句如何解析")]),t._v(" "),s("li",[t._v("Mybatis 中 Mapper 接口的存储与实现")]),t._v(" "),s("li",[t._v("Mybatis SQL 的执行过程")]),t._v(" "),s("li",[t._v("Mybatis 中分页如何实现")])]),t._v(" "),s("h2",{attrs:{id:"持久层的那些事"}},[t._v("持久层的那些事 "),s("a",{staticClass:"header-anchor",attrs:{href:"#持久层的那些事"}},[t._v("#")])]),t._v(" "),s("h3",{attrs:{id:"jdbc"}},[t._v("JDBC "),s("a",{staticClass:"header-anchor",attrs:{href:"#jdbc"}},[t._v("#")])]),t._v(" "),s("h4",{attrs:{id:"什么是-jdbc"}},[t._v("什么是 JDBC "),s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jdbc"}},[t._v("#")])]),t._v(" "),s("p",[t._v("JDBC（JavaDataBase Connectivity）就是 Java 数据库连接, 说的直白点就是 "),s("strong",[t._v("使用 Java 语言操作数据库")])]),t._v(" "),s("p",[t._v("本来我们是通过控制台或客户端操作的数据库, JDBC 是用 Java 语言来发送 SQL 语句")]),t._v(" "),s("h4",{attrs:{id:"jdbc-原理"}},[t._v("JDBC 原理 "),s("a",{staticClass:"header-anchor",attrs:{href:"#jdbc-原理"}},[t._v("#")])]),t._v(" "),s("p",[t._v("最初 SUN 公司希望提供一套 "),s("strong",[t._v("能够适用所有数据库的 API")]),t._v(", 但是在实际操作中却发现这是项基本不可能完成的任务")]),t._v(" "),s("p",[t._v("因为各个厂商所提供的 "),s("strong",[t._v("数据库差异实在太大")]),t._v(", 所以 SUN 公司与数据库厂商讨论出的就是：由 "),s("strong",[t._v("SUN 公司提供出一套访问数据库的规范 API")]),t._v(", 并提供相对应的连接数据库协议标准, 然后各厂商根据规范提供一套访问自家数据库的 API 接口")]),t._v(" "),s("p",[t._v("最终：SUN 公司提供的规范 API 称之为 "),s("strong",[t._v("JDBC")]),t._v(", 各厂商提供的自家数据库 API 接口称之为 "),s("strong",[t._v("驱动")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20200818124614542.png",alt:"JDBC 架构图"}})]),t._v(" "),s("h3",{attrs:{id:"mybatis"}},[t._v("Mybatis "),s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis"}},[t._v("#")])]),t._v(" "),s("h4",{attrs:{id:"什么是-mybatis"}},[t._v("什么是 Mybatis "),s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-mybatis"}},[t._v("#")])]),t._v(" "),s("p",[t._v("Mybatis 是一款优秀的 ORM（持久层）框架，使用 Java 语言 编写")]),t._v(" "),s("p",[t._v("前身是 apache 的一个开源项目 iBatis，2010 年迁移到 google code 并正式改名为 Mybatis")]),t._v(" "),s("p",[t._v("ORM 持久层 指的是 : "),s("strong",[t._v("将业务数据存储到磁盘，也具备长期存储能力，只要磁盘不损坏，如果在断电情况下，重启系统仍然可以读取数据")])]),t._v(" "),s("h4",{attrs:{id:"mybatis-与-jdbc-的关系"}},[t._v("Mybatis 与 JDBC 的关系 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-与-jdbc-的关系"}},[t._v("#")])]),t._v(" "),s("p",[t._v("在没有持久层框架之前, 想要代码中操作数据库都必须通过 JDBC 来操作, 接下来一个例子来说明两者之间的关系")]),t._v(" "),s("p",[s("strong",[t._v("JDBC 操作数据库")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/carbon_jdbc.png",alt:"JDBC"}})]),t._v(" "),s("p",[t._v("相信大家都在实际项目中使用过 Mybatis, 可以联想一下, 平常我们工作中, 是否做过以下事情：")]),t._v(" "),s("ul",[s("li",[t._v("是否装载过数据库驱动？")]),t._v(" "),s("li",[t._v("是否从驱动中获取数据库连接？")]),t._v(" "),s("li",[t._v("是否创建过执行 SQL 的 Statement？")]),t._v(" "),s("li",[t._v("是否自行将数据库返回结果转换成 Java 对象？")]),t._v(" "),s("li",[t._v("是否关闭过 finally 块中的三个对象？")])]),t._v(" "),s("p",[t._v("看到上面的灵魂拷问, 就可以对本次分享的第一个问题作出解答:")]),t._v(" "),s("p",[s("strong",[t._v("Mybatis 针对 JDBC 中重复操作做了封装, 同时扩展并优化部分功能")])]),t._v(" "),s("h2",{attrs:{id:"mybatis-关键词说明"}},[t._v("Mybatis 关键词说明 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-关键词说明"}},[t._v("#")])]),t._v(" "),s("blockquote",[s("p",[t._v("📖 如果在阅读文章前没有接触过 Mybatis 源码相关的内容, 建议将下述名词多看几遍再向下阅读")])]),t._v(" "),s("h3",{attrs:{id:"sqlsession"}},[t._v("SqlSession "),s("a",{staticClass:"header-anchor",attrs:{href:"#sqlsession"}},[t._v("#")])]),t._v(" "),s("p",[t._v("负责执行 "),s("strong",[t._v("select、insert、update、delete")]),t._v(" 等命令, 同时负责获取映射器和管理事务; 其底层封装了与 JDBC 的交互, 可以说是 mybatis 最核心的接口之一")]),t._v(" "),s("h3",{attrs:{id:"sqlsessionfactory"}},[t._v("SqlSessionFactory "),s("a",{staticClass:"header-anchor",attrs:{href:"#sqlsessionfactory"}},[t._v("#")])]),t._v(" "),s("p",[t._v("负责创建 "),s("strong",[t._v("SqlSession")]),t._v(" 的工厂, 一旦被创建就应该在应用运行期间一直存在, "),s("strong",[t._v("不需要额外再进行创建")])]),t._v(" "),s("h3",{attrs:{id:"sqlsessionfactorybuilder"}},[t._v("SqlSessionFactoryBuilder "),s("a",{staticClass:"header-anchor",attrs:{href:"#sqlsessionfactorybuilder"}},[t._v("#")])]),t._v(" "),s("p",[t._v("主要是负责创建 "),s("strong",[t._v("SqlSessionFactory")]),t._v(" 的构造器类, 其中使用到了构建者设计模式; 仅负责创建 "),s("strong",[t._v("SqlSessionFactory")])]),t._v(" "),s("h3",{attrs:{id:"configuration"}},[t._v("Configuration "),s("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[t._v("#")])]),t._v(" "),s("p",[t._v("Mybatis 最重要的配置类, 没有之一, 存储了大量的对象配置, 可以看源码感受一下")]),t._v(" "),s("h3",{attrs:{id:"mappedstatement"}},[t._v("MappedStatement "),s("a",{staticClass:"header-anchor",attrs:{href:"#mappedstatement"}},[t._v("#")])]),t._v(" "),s("p",[t._v("MappedStatement 是保存 SQL 语句的数据结构, 其中的类属性都是由解析 .xml 文件中的 SQL 标签转化而成")]),t._v(" "),s("h3",{attrs:{id:"executor"}},[t._v("Executor "),s("a",{staticClass:"header-anchor",attrs:{href:"#executor"}},[t._v("#")])]),t._v(" "),s("p",[t._v("SqlSession 对象对应一个 Executor, Executor 对象作用于 "),s("strong",[t._v("增删改查方法")]),t._v(" 以及 "),s("strong",[t._v("事务、缓存")]),t._v(" 等操作")]),t._v(" "),s("h3",{attrs:{id:"parameterhandler"}},[t._v("ParameterHandler "),s("a",{staticClass:"header-anchor",attrs:{href:"#parameterhandler"}},[t._v("#")])]),t._v(" "),s("p",[t._v("Mybatis 中的 "),s("strong",[t._v("参数处理器")]),t._v(", 类关系比较简单")]),t._v(" "),s("h3",{attrs:{id:"statementhandler"}},[t._v("StatementHandler "),s("a",{staticClass:"header-anchor",attrs:{href:"#statementhandler"}},[t._v("#")])]),t._v(" "),s("p",[t._v("StatementHandler 是 Mybatis 负责 "),s("strong",[t._v("创建 Statement 的处理器")]),t._v(", 根据不同的业务创建不同功能的 Statement")]),t._v(" "),s("h3",{attrs:{id:"resultsethandler"}},[t._v("ResultSetHandler "),s("a",{staticClass:"header-anchor",attrs:{href:"#resultsethandler"}},[t._v("#")])]),t._v(" "),s("p",[t._v("ResultSetHandler 是 Mybatis 负责将 JDBC 返回数据进行解析, 并包装为 Java 中对应数据结构的处理器")]),t._v(" "),s("h3",{attrs:{id:"interceptor"}},[t._v("Interceptor "),s("a",{staticClass:"header-anchor",attrs:{href:"#interceptor"}},[t._v("#")])]),t._v(" "),s("p",[t._v("Interceptor 为 Mybatis 中定义公共拦截器的接口, 其中定义了相关实现方法")]),t._v(" "),s("h2",{attrs:{id:"mybatis-架构设计"}},[t._v("Mybatis 架构设计 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-架构设计"}},[t._v("#")])]),t._v(" "),s("h3",{attrs:{id:"架构图"}},[t._v("架构图 "),s("a",{staticClass:"header-anchor",attrs:{href:"#架构图"}},[t._v("#")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/Mybatis%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90-Mybatis%E6%9E%B6%E6%9E%84%E5%9B%BE_2.png",alt:"Mybatis 分层架构图"}})]),t._v(" "),s("h3",{attrs:{id:"基础支持层"}},[t._v("基础支持层 "),s("a",{staticClass:"header-anchor",attrs:{href:"#基础支持层"}},[t._v("#")])]),t._v(" "),s("h4",{attrs:{id:"反射模块"}},[t._v("反射模块 "),s("a",{staticClass:"header-anchor",attrs:{href:"#反射模块"}},[t._v("#")])]),t._v(" "),s("p",[t._v("反射在 Java 中的应用可以说是相当广泛了, 同时也是一把双刃剑。 Mybatis 框架本身 "),s("strong",[t._v("封装出了反射模块")]),t._v(", 提供了比原生反射更 "),s("strong",[t._v("简洁易用的 API 接口")]),t._v(", 以及对 "),s("strong",[t._v("类的元数据增加缓存, 提高反射的性能")])]),t._v(" "),s("h4",{attrs:{id:"类型转换"}},[t._v("类型转换 "),s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")])]),t._v(" "),s("p",[t._v("类型转换模块最重要的功能就是在为 SQL 语句绑定实参时, 将 "),s("strong",[t._v("Java 类型转为 JDBC 类型")]),t._v(", 在映射结果集时再由 "),s("strong",[t._v("JDBC 类型转为 Java 类型")])]),t._v(" "),s("p",[t._v("另外一个功能就是提供别名机制, 简化了配置文件的定义")]),t._v(" "),s("h4",{attrs:{id:"日志模块"}},[t._v("日志模块 "),s("a",{staticClass:"header-anchor",attrs:{href:"#日志模块"}},[t._v("#")])]),t._v(" "),s("p",[t._v("日志对于系统的作用不言而喻, 尤其是测试、生产环境上查看信息及排查错误等都非常重要。主流的日志框架包括 Log4j、Log4j2、S l f4j 等, Mybatis 的日志模块作用就是 "),s("strong",[t._v("集成这些日志框架")])]),t._v(" "),s("h4",{attrs:{id:"资源加载"}},[t._v("资源加载 "),s("a",{staticClass:"header-anchor",attrs:{href:"#资源加载"}},[t._v("#")])]),t._v(" "),s("p",[t._v("Mybatis 对类加载器进行了封装, 用来确定类加载器的使用顺序, 用来记载类文件以及其它资源文件, 感兴趣可以参考 "),s("strong",[t._v("ClassLoaderWrapper")])]),t._v(" "),s("h4",{attrs:{id:"解析器模块"}},[t._v("解析器模块 "),s("a",{staticClass:"header-anchor",attrs:{href:"#解析器模块"}},[t._v("#")])]),t._v(" "),s("p",[t._v("解析器模块主要提供了两个功能, 一个是封装了 XPath 类, 在 Mybatis 初始化时解析 Mybatis-config.xml 配置文件以及映射配置文件提供功能, 另一点就是处理动态 SQL 语句的占位符提供帮助")]),t._v(" "),s("h4",{attrs:{id:""}},[t._v("... "),s("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])]),t._v(" "),s("h3",{attrs:{id:"核心处理层"}},[t._v("核心处理层 "),s("a",{staticClass:"header-anchor",attrs:{href:"#核心处理层"}},[t._v("#")])]),t._v(" "),s("h4",{attrs:{id:"配置解析"}},[t._v("配置解析 "),s("a",{staticClass:"header-anchor",attrs:{href:"#配置解析"}},[t._v("#")])]),t._v(" "),s("p",[t._v("在 Mybatis 初始化时, 会加载 Mybatis-config.xml 文件中的配置信息, 解析后的配置信息会 "),s("strong",[t._v("转换成 Java 对象添加到 Configuration 对象")])]),t._v(" "),s("blockquote",[s("p",[t._v("📖 比如说在 .xml 中定义的 resultMap 标签, 会被解析为 ResultMap 对象")])]),t._v(" "),s("h4",{attrs:{id:"sql-解析"}},[t._v("SQL 解析 "),s("a",{staticClass:"header-anchor",attrs:{href:"#sql-解析"}},[t._v("#")])]),t._v(" "),s("p",[t._v("大家如果手动拼写过复杂 SQL 语句, 就会明白会有多痛苦。Mybatis 提供出了动态 SQL, 加入了许多判断循环型标签, 比如 : if、where、foreach、set 等, 帮助开发者节约了大量的 SQL 拼写时间")]),t._v(" "),s("p",[t._v("SQL 解析模块的作用就是将 Mybatis 提供的动态 SQL 标签解析为带占位符的 SQL 语句, 并在后期将实参对占位符进行替换")]),t._v(" "),s("h4",{attrs:{id:"sql-执行"}},[t._v("SQL 执行 "),s("a",{staticClass:"header-anchor",attrs:{href:"#sql-执行"}},[t._v("#")])]),t._v(" "),s("p",[t._v("SQL 的执行过程涉及几个比较重要的对象, "),s("strong",[t._v("Executor、StatementHandler、ParameterHandler、ResultSetHandler")])]),t._v(" "),s("p",[t._v("Executor 负责维护 "),s("strong",[t._v("一级、二级缓存以及事务提交回滚操作")]),t._v(", 举个查询的例子, 查询请求会由 Executor 交给 StatementHandler 完成")]),t._v(" "),s("p",[t._v("StatementHandler 通过 ParameterHandler 完成 "),s("strong",[t._v("SQL 语句的实参绑定")]),t._v(", 通过 java.sql.Statement 执行 SQL 语句并拿到对应的 "),s("strong",[t._v("结果集映射")])]),t._v(" "),s("p",[t._v("最后交由 ResultSetHandler 对结果集进行解析, 将 JDBC 类型转换为程序自定义的对象")]),t._v(" "),s("h4",{attrs:{id:"插件"}},[t._v("插件 "),s("a",{staticClass:"header-anchor",attrs:{href:"#插件"}},[t._v("#")])]),t._v(" "),s("p",[t._v("插件模块是 Mybatis 提供的一层扩展, 可以针对 SQL 执行的四大对象进行 "),s("strong",[t._v("拦截并执行自定义插件")])]),t._v(" "),s("p",[t._v("插件编写需要很熟悉 Mybatis 运行机制, 这样才能控制编写的插件安全、高效")]),t._v(" "),s("h3",{attrs:{id:"接口层"}},[t._v("接口层 "),s("a",{staticClass:"header-anchor",attrs:{href:"#接口层"}},[t._v("#")])]),t._v(" "),s("p",[t._v("接口层只是 Mybatis "),s("strong",[t._v("提供给调用端的一个接口 SqlSession")]),t._v(", 调用端在进行调用接口中方法时, 会调用核心处理层相对应的模块来完成数据库操作")]),t._v(" "),s("h2",{attrs:{id:"问题答疑"}},[t._v("问题答疑 "),s("a",{staticClass:"header-anchor",attrs:{href:"#问题答疑"}},[t._v("#")])]),t._v(" "),s("h3",{attrs:{id:"xml-文件定义-sql-语句如何解析"}},[t._v(".xml 文件定义 Sql 语句如何解析 "),s("a",{staticClass:"header-anchor",attrs:{href:"#xml-文件定义-sql-语句如何解析"}},[t._v("#")])]),t._v(" "),s("p",[t._v("Mybatis 在创建 SqlSessionFactory 时, XMLConfigBuilder 会解析 Mybatis-config.xml 配置文件")]),t._v(" "),s("h4",{attrs:{id:"mybatis-相关解析器"}},[t._v("Mybatis 相关解析器 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-相关解析器"}},[t._v("#")])]),t._v(" "),s("p",[t._v("Mybatis 解析器模块中定义了相关解析器的抽象类 BaseBuilder, 不同的子类负责实现解析不同的功能, 使用了 Builder 设计模式")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20200902131259623.png",alt:"BaseBuilder"}})]),t._v(" "),s("p",[t._v("XMLConfigBuilder 负责解析 mybatis-config.xml 配置文件")]),t._v(" "),s("p",[t._v("XMLMapperBuilder 负责解析业务产生的 xxxMapper.xml")]),t._v(" "),s("p",[t._v("...")]),t._v(" "),s("h4",{attrs:{id:"mybatis-config-xml-解析"}},[t._v("mybatis-config.xml 解析 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-config-xml-解析"}},[t._v("#")])]),t._v(" "),s("p",[t._v("XMLConfigBuilder 解析 mybatis-config.xml 内容参考代码 :")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/parseConfiguration.png",alt:"parseConfiguration"}})]),t._v(" "),s("p",[s("strong",[t._v("XMLConfifigBuilder#parseConfiguration()")]),t._v(" 方法将 mybatis-config.xml 中定义的标签进行相关解析并填充到 Configuration 对象中")]),t._v(" "),s("h4",{attrs:{id:"xxxmapper-xml-解析"}},[t._v("xxxMapper.xml 解析 "),s("a",{staticClass:"header-anchor",attrs:{href:"#xxxmapper-xml-解析"}},[t._v("#")])]),t._v(" "),s("p",[s("strong",[t._v("XMLConfifigBuilder#mapperElement()")]),t._v(" 中解析配置的 mappers 标签, 找到具体的 .xml 文件, 并将其中的 select、insert、update、delete、resultMap 等标签解析为 Java 中的对象信息")]),t._v(" "),s("p",[t._v("具体解析 xxxMapper.xml 的对象为 XMLMapperBuilder, 具体的解析方法为 parse()")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/parse.png",alt:"parse"}})]),t._v(" "),s("p",[t._v("到这里就可以对当前问题作出答复了")]),t._v(" "),s("p",[t._v("Mybatis 创建 "),s("strong",[t._v("SqlSessionFactory")]),t._v(" 会解析 "),s("strong",[t._v("mybatis-config.xml")]),t._v(", 然后 "),s("strong",[t._v("解析 configuration 标签下的子标签")]),t._v(", 解析 mappers 标签时, 会根据相关配置读取到 .xml 文件, 继而解析 .xml 中各个标签")]),t._v(" "),s("p",[t._v("具体的 select、insert、update、delete 标签定义为 "),s("strong",[t._v("MappedStatement")]),t._v(" 对象, .xml 文件中的其余标签也会根据不同映射解析为 Java 对象")]),t._v(" "),s("h4",{attrs:{id:"mappedstatement-2"}},[t._v("MappedStatement "),s("a",{staticClass:"header-anchor",attrs:{href:"#mappedstatement-2"}},[t._v("#")])]),t._v(" "),s("p",[t._v("这里重点说明下 MappedStatement 对象, 一起看一下类中的属性和 SQL 有何关联呢")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/MappedStatement.png",alt:"MappedStatement"}})]),t._v(" "),s("p",[t._v("MappedStatement 对象中 "),s("strong",[t._v("提供的属性与 .xml 文件中定义的 SQL 语句")]),t._v(" 是能够对应上的, 用来 "),s("strong",[t._v("控制每条 SQL 语句的执行行为")])]),t._v(" "),s("h3",{attrs:{id:"mapper-接口的存储与实现"}},[t._v("Mapper 接口的存储与实现 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mapper-接口的存储与实现"}},[t._v("#")])]),t._v(" "),s("p",[t._v("在平常我们写的 SSM 框架中, 定义了 Mapper 接口与 .xml 对应的 SQL 文件, 在 Service 层直接注入 xxxMapper 就可以了")]),t._v(" "),s("p",[t._v("也没有看到像 JDBC 操作数据库的操作, Mybatis 在中间是如何为我们省略下这些重复繁琐的操作呢")]),t._v(" "),s("p",[t._v("这里使用 Mybatis 源码中的测试类进行验证, 首先定义 Mapper 接口, 省事直接注解定义 SQL")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/AutoConstructorMapper_new.png",alt:"AutoConstructorMapper"}})]),t._v(" "),s("p",[t._v("这里使用 SqlSession 来获取 Mapper 操作数据库, 测试方法如下")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/primitiveSubjects.png",alt:"primitiveSubjects"}})]),t._v(" "),s("h4",{attrs:{id:"创建-sqlsession"}},[t._v("创建 SqlSession "),s("a",{staticClass:"header-anchor",attrs:{href:"#创建-sqlsession"}},[t._v("#")])]),t._v(" "),s("p",[t._v("#1 从 SqlSessionFactory 中打开一个 新的 SqlSession")]),t._v(" "),s("h4",{attrs:{id:"获取-mapper-实例"}},[t._v("获取 Mapper 实例 "),s("a",{staticClass:"header-anchor",attrs:{href:"#获取-mapper-实例"}},[t._v("#")])]),t._v(" "),s("p",[t._v("#2 就存在一个疑问点, 定义的 AutoConstructorMapper 明明是个接口, "),s("strong",[t._v("为什么可以实例化为对象?")])]),t._v(" "),s("h4",{attrs:{id:"动态代理方法调用"}},[t._v("动态代理方法调用 "),s("a",{staticClass:"header-anchor",attrs:{href:"#动态代理方法调用"}},[t._v("#")])]),t._v(" "),s("p",[t._v("#3 通过创建的对象调用类中具体的方法, 这里具体聊一下 #2 操作")]),t._v(" "),s("p",[t._v("SqlSession 是一个接口, 有一个 "),s("strong",[t._v("默认的实现类 DefaultSqlSession")]),t._v(", 类中包含了 Configuration 属性")]),t._v(" "),s("p",[t._v("Mapper 接口的信息以及 .xml 中 SQL 语句是在 Mybatis "),s("strong",[t._v("初始化时添加")]),t._v(" 到 Configuration 的 "),s("strong",[t._v("MapperRegistry")]),t._v(" 属性中的")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/addMapper.png",alt:"MapperRegistry#addMapper"}})]),t._v(" "),s("p",[t._v("#2 中的 getMapper 就是从 MapperRegistry 中获取 Mapper")]),t._v(" "),s("p",[t._v("看一下 MapperRegistry 的类属性都有什么")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/MapperRegistry.png",alt:"MapperRegistry"}})]),t._v(" "),s("p",[t._v("config 为 "),s("strong",[t._v("保持全局唯一")]),t._v(" 的 Configuration 对象引用")]),t._v(" "),s("p",[s("strong",[t._v("knownMappers")]),t._v(" 中 Key-Class 是 Mapper 对象, Value-MapperProxyFactory 是通过 Mapper 对象衍生出的 "),s("strong",[t._v("Mapper 代理工厂")])]),t._v(" "),s("p",[t._v("再看一下 MapperProxyFactory 类的结构信息")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/MapperProxyFactory.png",alt:"MapperProxyFactory"}})]),t._v(" "),s("p",[t._v("mapperInterface 属性是 Mapper 对象的引用, methodCache 的 key 是 Mapper 中的方法, value 是 Mapper 解析对应 SQL 产生的 MapperMethod")]),t._v(" "),s("blockquote",[s("p",[t._v("📖 Mybatis 设计 methodCache 属性时使用到了 "),s("strong",[t._v("懒加载机制")]),t._v(", 在初始化时不会增加对应 Method, 而是在 "),s("strong",[t._v("第一次调用时新增")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/cachedMapperMethod.png",alt:"cachedMapperMethod"}})]),t._v(" "),s("p",[t._v("MapperMethod 运行时数据如下, 比较容易理解")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20200902133450941.png",alt:"MapperMethod 运行状态"}})]),t._v(" "),s("p",[t._v("通过一个实际例子帮忙理解一下 MapperRegistry 类关系, Mapper 初始化第一次调用的对象状态, 可以看到 methodCache 容量为 0")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20200821191913092.png",alt:"MapperRegistry 运行状态"}})]),t._v(" "),s("p",[t._v("我们目前已经知道 MapperRegistry 的类关系, 回头继续看一下第二步的 "),s("strong",[t._v("MapperRegistry#getMapper")]),t._v("() 处理步骤")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/getMapper.png",alt:"getMapper"}})]),t._v(" "),s("p",[t._v("核心处理在 MapperProxyFactory#newInstance() 方法中, 继续跟进")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/newInstance.png",alt:"newInstance"}})]),t._v(" "),s("p",[t._v("MapperProxy "),s("strong",[t._v("继承了 InvocationHandler 接口")]),t._v(", 通过 newInstance() 最终返回的是由 "),s("strong",[t._v("Java Proxy 动态代理返回的动态代理实现类")])]),t._v(" "),s("p",[t._v("看到这里就清楚了步骤二中接口为什么能够被实例化, 返回的是 "),s("strong",[t._v("接口的动态代理实现类")])]),t._v(" "),s("h3",{attrs:{id:"mybatis-sql-的执行过程"}},[t._v("Mybatis Sql 的执行过程 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-sql-的执行过程"}},[t._v("#")])]),t._v(" "),s("p",[t._v("根据 Mybatis SQL 执行流程图进一步了解")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/Mybatis-SQL%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png",alt:"Mybatis-SQL执行流程"}})]),t._v(" "),s("p",[t._v("大致可以分为以下几步操作:")]),t._v(" "),s("blockquote",[s("p",[t._v("📖 在前面的内容中, 知道了 Mybatis Mapper 是动态代理的实现, 查看 SQL 执行过程, 就需要紧跟实现了 InvocationHandler 的 MapperProxy 类")])]),t._v(" "),s("h4",{attrs:{id:"执行增删改查"}},[t._v("执行增删改查 "),s("a",{staticClass:"header-anchor",attrs:{href:"#执行增删改查"}},[t._v("#")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Select")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('" SELECT * FROM SUBJECT WHERE ID = #{id}"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrimitiveSubject")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getSubject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Param")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"id"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("我们以上述方法举例, 调用方通过 SqlSession 获取 Mapper 动态代理对象, 执行 Mapper 方法时会通过 "),s("strong",[t._v("InvocationHandler 进行代理")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/MapperProxy.png",alt:"MapperProxy"}})]),t._v(" "),s("p",[t._v("在 MapperMethod#execute 中, 根据 MapperMethod -> SqlCommand -> "),s("strong",[t._v("SqlCommandType")]),t._v(" 来确定增、删、改、查方法")]),t._v(" "),s("blockquote",[s("p",[t._v("📖 SqlCommandType 是一个枚举类型, 对应五种类型 UNKNOWN、INSERT、UPDATE、DELETE、SELECT、FLUSH")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/execute.png",alt:"execute"}})]),t._v(" "),s("h4",{attrs:{id:"参数处理"}},[t._v("参数处理 "),s("a",{staticClass:"header-anchor",attrs:{href:"#参数处理"}},[t._v("#")])]),t._v(" "),s("p",[t._v("查询操作对应 SELECT 枚举值, if else 中判断为返回值是否集合、无返回值、单条查询等, 这里以查询单条记录作为入口")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" param "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("convertArgsToSqlCommandParam")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nresult "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sqlSession"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("selectOne")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" param"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/convertArgsToSqlCommandParam_new.png",alt:"convertArgsToSqlCommandParam_new"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20200902124629730.png",alt:"参数解析"}})]),t._v(" "),s("blockquote",[s("p",[t._v("📖 这里能够解释一个之前困扰我的问题, 那就是为什么方法入参只有单个 "),s("code",[t._v('@Param("id")')]),t._v(", 但是参数 param 对象会存在两个键值对")])]),t._v(" "),s("p",[t._v("继续查看 "),s("strong",[t._v("SqlSession#selectOne")]),t._v(" 方法, sqlSession 是一个接口, 具体还是要看实现类 "),s("strong",[t._v("DefaultSqlSession")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/selectOne.png",alt:"selectOne"}})]),t._v(" "),s("p",[t._v("因为单条和查询多条以及分页查询都是走的一个方法, 所以在查询的过程中, 会将分页的参数进行添加")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/selectList_new.png",alt:"selectList"}})]),t._v(" "),s("h4",{attrs:{id:"执行器处理"}},[t._v("执行器处理 "),s("a",{staticClass:"header-anchor",attrs:{href:"#执行器处理"}},[t._v("#")])]),t._v(" "),s("p",[t._v("在 Mybatis 源码中, 创建的执行器默认是 "),s("strong",[t._v("CachingExecutor,")]),t._v(" 使用了装饰者模式, 在类中保持了 "),s("strong",[t._v("Executor")]),t._v(" 接口的引用, "),s("strong",[t._v("CachingExecutor")]),t._v(" 在持有的执行器基础上增加了缓存的功能")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/CachingExecutor-query-new.png",alt:"CachingExecutor#query"}})]),t._v(" "),s("p",[s("strong",[t._v("delegate."),s("E",[t._v("query")])],1),t._v(" 就是在具体的执行器了, 默认 "),s("strong",[t._v("SimpleExecutor,")]),t._v(" query 方法统一在抽象父类 "),s("strong",[t._v("BaseExecutor")]),t._v(" 中维护")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/BaseExecutor_query.png",alt:"BaseExecutor#query"}})]),t._v(" "),s("p",[s("strong",[t._v("BaseExecutor#queryFromDatabase")]),t._v(" 方法执行了缓存占位符以及执行具体方法, 并将查询返回数据添加至缓存")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/queryFromDatabase.png",alt:"queryFromDatabase"}})]),t._v(" "),s("p",[s("strong",[t._v("BaseExecutor#doQuery")]),t._v(" 方法是由具体的 SimpleExecutor 实现")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/doQuery.png",alt:"doQuery"}})]),t._v(" "),s("h4",{attrs:{id:"执行-sql"}},[t._v("执行 SQL "),s("a",{staticClass:"header-anchor",attrs:{href:"#执行-sql"}},[t._v("#")])]),t._v(" "),s("p",[t._v("因为我们 SQL 中使用了参数占位符, 使用的是 "),s("strong",[t._v("PreparedStatementHandler")]),t._v(" 对象 , 执行预编译 SQL 的 Handler, 实际使用 "),s("strong",[t._v("PreparedStatement")]),t._v(" 进行 SQL 调用")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/PreparedStatementHandler_query.png",alt:"PreparedStatementHandler_query"}})]),t._v(" "),s("h4",{attrs:{id:"返回数据解析"}},[t._v("返回数据解析 "),s("a",{staticClass:"header-anchor",attrs:{href:"#返回数据解析"}},[t._v("#")])]),t._v(" "),s("p",[t._v("将 JDBC 返回类型转换为 Java 类型, 根据 resultSets 和 resultMap 进行转换")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/handleResultSets.png",alt:"handleResultSets"}})]),t._v(" "),s("h3",{attrs:{id:"mybatis-中分页如何实现"}},[t._v("Mybatis 中分页如何实现 "),s("a",{staticClass:"header-anchor",attrs:{href:"#mybatis-中分页如何实现"}},[t._v("#")])]),t._v(" "),s("p",[t._v("通过 Mybatis 执行分页 SQL 有两种实现方式, 一种是编写 SQL 时添加 LIMIT, 一种是全局处理")]),t._v(" "),s("h4",{attrs:{id:"sql-分页"}},[t._v("SQL 分页 "),s("a",{staticClass:"header-anchor",attrs:{href:"#sql-分页"}},[t._v("#")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"getSubjectByPage"')]),t._v(" resultMap"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"resultAutoMap"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" SUBJECT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LIMIT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#{CURRINDEX} , #{PAGESIZE}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h4",{attrs:{id:"拦截器分页"}},[t._v("拦截器分页 "),s("a",{staticClass:"header-anchor",attrs:{href:"#拦截器分页"}},[t._v("#")])]),t._v(" "),s("p",[t._v("上文说到, Mybatis 支持了插件扩展机制, 可以拦截到具体对象的方法以及对应入参级别")]),t._v(" "),s("p",[t._v("我们添加插件时需要实现 "),s("strong",[t._v("Interceptor")]),t._v(" 接口, 然后将插件写在 mybatis-config.xml 配置文件中或者添加相关注解, Mybatis 初始化时解析才能在项目启动时添加到插件容器中")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/pluginElement.png",alt:"pluginElement"}})]),t._v(" "),s("p",[t._v("由一个 List 结构存储项目中全部拦截器, 通过 "),s("strong",[t._v("Configuration#addInterceptor")]),t._v(" 方法添加")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/InterceptorChain.png",alt:"InterceptorChain"}})]),t._v(" "),s("p",[t._v("重点需要关注 "),s("strong",[t._v("Interceptor#pluginAll")]),t._v(" 中 plugin 方法, Interceptor 只是一个接口, plugin 方法只能由其实现类完成")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/ExamplePlugin.png",alt:"ExamplePlugin"}})]),t._v(" "),s("p",[t._v("Plugin 可以理解为是一个工具类, "),s("strong",[t._v("Plugin#wrap")]),t._v(" 返回的是一个动态代理类 ")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/wrap.png",alt:"wrap"}})]),t._v(" "),s("p",[t._v("这里使用一个测试的 Demo 看一下方法运行时的参数")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/AlwaysMapPlugin.png",alt:"AlwaysMapPlugin"}})]),t._v(" "),s("p",[t._v("虽然是随便写的 Demo, 但是与正式使用的插件并无实际区别")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://images-machen.oss-cn-beijing.aliyuncs.com/image-20200902103355292.png",alt:"插件运行状态"}})]),t._v(" "),s("h2",{attrs:{id:"相关链接"}},[t._v("相关链接 "),s("a",{staticClass:"header-anchor",attrs:{href:"#相关链接"}},[t._v("#")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/Mybatis/Mybatis-3",title:"源码下载地址",target:"_blank",rel:"noopener noreferrer"}},[t._v("源码下载地址"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://carbon.now.sh/",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码生成图片"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.mdnice.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("多功能在线 Markdown 编辑器"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);